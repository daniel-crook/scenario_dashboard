x = 0.08,
y = 0.99,
font = list(
family = "segoe ui",
size = 18,
color = ox_pallette()[2]
)
))
if (length(input) >= 2) {
for (i in 2:length(input)) {
fig <- fig %>% add_trace(x = chart_data[[input[i]]],
color = I(ox_pallette()[i]),
name = input[i])
}
}
fig
new_name <- data.frame(Attribute = c("Demand For Gas (Excl. Electricity)",
"Demand For Oil (Excl. Electricity)",
"Demand For Coal (Excl. Electricity)",
"Total Final Electricity Consumption"
), new_name = c("Gas", "Oil", "Coal", "Electricity"))
chart_data <-
filter(data,
Mnemonic %in% c("DGAS_XELEC", "DOIL_XELEC", "DCOAL_XELEC", "DELEC")) %>%
left_join(., new_name, by = "Attribute") %>%
transmute(.,
Dates = as.Date(Dates),
variable = new_name,
value = as.numeric(value),
Mnemonic,
Scenario = paste(Scenario)
) %>%
mutate(value = case_when(Mnemonic == "DELEC" ~ value / 11630,
Mnemonic != "DELEC" ~ value))
chart_data_delec <- filter(chart_data, Mnemonic == "DELEC") %>% trail_sum()
chart_data <- filter(chart_data, Mnemonic != "DELEC") %>% trail_avg() %>% rbind(., chart_data_delec)
chart_data <- mutate(chart_data, value = round(value, 2)) %>%
filter(., month(Dates) == 12) %>%
mutate(., Dates = year(Dates)) %>%
select(-Mnemonic) %>%
spread(., variable, value)
chart_data <- filter(chart_data, Dates == "2050")
input <- colnames(chart_data)[3:length(colnames(chart_data))]
fig <- plot_ly(chart_data, y = ~Scenario,  x = ~chart_data[[input[1]]],
type = 'bar',
orientation = 'h',
name = input[1],
color = I(ox_pallette()[1])
) %>%
layout(
xaxis = list(title = "Mtoe"),
yaxis = list(title = ""),
legend = list(
orientation = "h",
xanchor = "center",
x = 0.5,
y = -0.2
),
barmode = 'stack'
) %>%
layout(title = list(
text = paste0(
'<b>',
"Overall Energy Mix for Australia, 2050, by Scenario",
'<b>'
),
x = 0.08,
y = 0.99,
font = list(
family = "segoe ui",
size = 18,
color = ox_pallette()[2]
)
))
if (length(input) >= 2) {
for (i in 2:length(input)) {
fig <- fig %>% add_trace(x = chart_data[[input[i]]],
color = I(ox_pallette()[i]),
name = input[i])
}
}
fig
View(chart_data)
fig <- plot_ly(chart_data, y = ~Scenario,  x = ~chart_data[[input[1]]],
type = 'bar',
orientation = 'h',
color = I(ox_pallette()[1])
) %>%
layout(
xaxis = list(title = "Mtoe"),
yaxis = list(title = ""),
legend = list(
orientation = "h",
xanchor = "center",
x = 0.5,
y = -0.2
),
barmode = 'stack'
) %>%
layout(title = list(
text = paste0(
'<b>',
"Overall Energy Mix for Australia, 2050, by Scenario",
'<b>'
),
x = 0.08,
y = 0.99,
font = list(
family = "segoe ui",
size = 18,
color = ox_pallette()[2]
)
))
if (length(input) >= 2) {
for (i in 2:length(input)) {
fig <- fig %>% add_trace(x = chart_data[[input[i]]],
color = I(ox_pallette()[i]))
}
}
fig
new_name <- data.frame(Attribute = c("Demand For Gas (Excl. Electricity)",
"Demand For Oil (Excl. Electricity)",
"Demand For Coal (Excl. Electricity)",
"Total Final Electricity Consumption"
), new_name = c("Gas", "Oil", "Coal", "Electricity"))
chart_data <-
filter(data,
Mnemonic %in% c("DGAS_XELEC", "DOIL_XELEC", "DCOAL_XELEC", "DELEC")) %>%
left_join(., new_name, by = "Attribute") %>%
transmute(.,
Dates = as.Date(Dates),
variable = new_name,
value = as.numeric(value),
Mnemonic,
Scenario = paste(Scenario)
) %>%
mutate(value = case_when(Mnemonic == "DELEC" ~ value / 11630,
Mnemonic != "DELEC" ~ value))
chart_data_delec <- filter(chart_data, Mnemonic == "DELEC") %>% trail_sum()
chart_data <- filter(chart_data, Mnemonic != "DELEC") %>% trail_avg() %>% rbind(., chart_data_delec)
chart_data <- mutate(chart_data, value = round(value, 2)) %>%
filter(., month(Dates) == 12) %>%
mutate(., Dates = year(Dates)) %>%
select(-Mnemonic) %>%
spread(., variable, value)
chart_data <- filter(chart_data, Dates == "2050")
input <- colnames(chart_data)[3:length(colnames(chart_data))]
fig <- plot_ly(chart_data, y = ~Scenario,  x = ~chart_data[[input[1]]],
type = 'bar',
orientation = 'h',
name = input[1],
color = I(ox_pallette()[1])
) %>%
layout(
xaxis = list(title = "Mtoe"),
yaxis = list(title = ""),
legend = list(
orientation = "h",
xanchor = "center",
x = 0.5,
y = -0.2
),
barmode = 'stack'
) %>%
layout(title = list(
text = paste0(
'<b>',
"Overall Energy Mix for Australia, 2050, by Scenario",
'<b>'
),
x = 0.08,
y = 0.99,
font = list(
family = "segoe ui",
size = 18,
color = ox_pallette()[2]
)
))
if (length(input) >= 2) {
for (i in 2:length(input)) {
fig <- fig %>% add_trace(x = chart_data[[input[i]]],
color = I(ox_pallette()[i]),
name = input[i])
}
}
fig
new_name <- data.frame(Attribute = c("Demand For Gas (Excl. Electricity)",
"Demand For Oil (Excl. Electricity)",
"Demand For Coal (Excl. Electricity)",
"Total Final Electricity Consumption"
), new_name = c("Gas", "Oil", "Coal", "Electricity"))
chart_data <-
filter(data,
Mnemonic %in% c("DGAS_XELEC", "DOIL_XELEC", "DCOAL_XELEC", "DELEC")) %>%
left_join(., new_name, by = "Attribute") %>%
transmute(.,
Dates = as.Date(Dates),
variable = new_name,
value = as.numeric(value),
Mnemonic,
Scenario = paste(Scenario)
) %>%
mutate(value = case_when(Mnemonic == "DELEC" ~ value / 11630,
Mnemonic != "DELEC" ~ value))
chart_data_delec <- filter(chart_data, Mnemonic == "DELEC") %>% trail_sum()
chart_data <- filter(chart_data, Mnemonic != "DELEC") %>% trail_avg() %>% rbind(., chart_data_delec)
chart_data <- mutate(chart_data, value = round(value, 2)) %>%
filter(., month(Dates) == 12) %>%
mutate(., Dates = year(Dates)) %>%
select(-Mnemonic) %>%
spread(., variable, value)
chart_data <- filter(chart_data, Dates == "2050")
input <- colnames(chart_data)[3:length(colnames(chart_data))]
fig <- plot_ly(chart_data, y = ~Scenario,  x = ~chart_data[[input[1]]],
type = 'bar',
orientation = 'h',
name = input[1],
color = I(ox_pallette()[1])
) %>%
layout(
xaxis = list(title = "Mtoe"),
yaxis = list(title = ""),
legend = list(
orientation = "h",
xanchor = "center",
x = 0.5,
y = -0.2
),
barmode = 'stack'
) %>%
layout(title = list(
text = paste0(
'<b>',
"Overall Energy Mix for Australia, 2050, by Scenario",
'<b>'
),
x = 0.08,
y = 0.99,
font = list(
family = "segoe ui",
size = 18,
color = ox_pallette()[2]
)
))
if (length(input) >= 2) {
for (i in 2:length(input)) {
fig <- fig %>% add_trace(x = chart_data[[input[i]]],
color = I(ox_pallette()[i]),
name = input[i])
}
}
fig
year <- "2050"
new_name <- data.frame(Attribute = c("Demand For Gas (Excl. Electricity)",
"Demand For Oil (Excl. Electricity)",
"Demand For Coal (Excl. Electricity)",
"Total Final Electricity Consumption"
), new_name = c("Gas", "Oil", "Coal", "Electricity"))
chart_data <-
filter(data,
Mnemonic %in% c("DGAS_XELEC", "DOIL_XELEC", "DCOAL_XELEC", "DELEC")) %>%
left_join(., new_name, by = "Attribute") %>%
transmute(.,
Dates = as.Date(Dates),
variable = new_name,
value = as.numeric(value),
Mnemonic,
Scenario = paste(Scenario)
) %>%
mutate(value = case_when(Mnemonic == "DELEC" ~ value / 11630,
Mnemonic != "DELEC" ~ value))
chart_data_delec <- filter(chart_data, Mnemonic == "DELEC") %>% trail_sum()
chart_data <- filter(chart_data, Mnemonic != "DELEC") %>% trail_avg() %>% rbind(., chart_data_delec)
chart_data <- mutate(chart_data, value = round(value, 2)) %>%
filter(., month(Dates) == 12) %>%
mutate(., Dates = year(Dates)) %>%
select(-Mnemonic) %>%
spread(., variable, value)
chart_data <- filter(chart_data, Dates == year)
input <- colnames(chart_data)[3:length(colnames(chart_data))]
fig <- plot_ly(chart_data, y = ~Scenario,  x = ~chart_data[[input[1]]],
type = 'bar',
orientation = 'h',
name = input[1],
color = I(ox_pallette()[1])
) %>%
layout(
xaxis = list(title = "Mtoe"),
yaxis = list(title = ""),
legend = list(
orientation = "h",
xanchor = "center",
x = 0.5,
y = -0.2
),
barmode = 'stack'
) %>%
layout(title = list(
text = paste0(
'<b>',
"Overall Energy Mix for Australia, ",year,", by Scenario",
'<b>'
),
x = 0.08,
y = 0.99,
font = list(
family = "segoe ui",
size = 18,
color = ox_pallette()[2]
)
))
if (length(input) >= 2) {
for (i in 2:length(input)) {
fig <- fig %>% add_trace(x = chart_data[[input[i]]],
color = I(ox_pallette()[i]),
name = input[i])
}
}
fig
year <- "2035"
new_name <- data.frame(Attribute = c("Demand For Gas (Excl. Electricity)",
"Demand For Oil (Excl. Electricity)",
"Demand For Coal (Excl. Electricity)",
"Total Final Electricity Consumption"
), new_name = c("Gas", "Oil", "Coal", "Electricity"))
chart_data <-
filter(data,
Mnemonic %in% c("DGAS_XELEC", "DOIL_XELEC", "DCOAL_XELEC", "DELEC")) %>%
left_join(., new_name, by = "Attribute") %>%
transmute(.,
Dates = as.Date(Dates),
variable = new_name,
value = as.numeric(value),
Mnemonic,
Scenario = paste(Scenario)
) %>%
mutate(value = case_when(Mnemonic == "DELEC" ~ value / 11630,
Mnemonic != "DELEC" ~ value))
chart_data_delec <- filter(chart_data, Mnemonic == "DELEC") %>% trail_sum()
chart_data <- filter(chart_data, Mnemonic != "DELEC") %>% trail_avg() %>% rbind(., chart_data_delec)
chart_data <- mutate(chart_data, value = round(value, 2)) %>%
filter(., month(Dates) == 12) %>%
mutate(., Dates = year(Dates)) %>%
select(-Mnemonic) %>%
spread(., variable, value)
chart_data <- filter(chart_data, Dates == year)
input <- colnames(chart_data)[3:length(colnames(chart_data))]
fig <- plot_ly(chart_data, y = ~Scenario,  x = ~chart_data[[input[1]]],
type = 'bar',
orientation = 'h',
name = input[1],
color = I(ox_pallette()[1])
) %>%
layout(
xaxis = list(title = "Mtoe"),
yaxis = list(title = ""),
legend = list(
orientation = "h",
xanchor = "center",
x = 0.5,
y = -0.2
),
barmode = 'stack'
) %>%
layout(title = list(
text = paste0(
'<b>',
"Overall Energy Mix for Australia, ",year,", by Scenario",
'<b>'
),
x = 0.08,
y = 0.99,
font = list(
family = "segoe ui",
size = 18,
color = ox_pallette()[2]
)
))
if (length(input) >= 2) {
for (i in 2:length(input)) {
fig <- fig %>% add_trace(x = chart_data[[input[i]]],
color = I(ox_pallette()[i]),
name = input[i])
}
}
fig
shiny::runApp('scenario_dashboard')
devtools::install_github("ewan-keith/shinyShortcut")
list.of.packages <-
c(
"shiny",
"bslib",
"htmltools",
"shinyWidgets",
"stringi",
"stringr",
"oxgraphs",
"plotly",
"DT",
"strex",
"data.table",
"kableExtra",
"shinyFiles",
"shinyjs",
"waiter",
"shinyFeedback",
"shinyShortcut"
)
new.packages <- list.of.packages[!(list.of.packages %in%
installed.packages()[, "Package"])]
if (length(new.packages)) {
install.packages(new.packages)
}
invisible(lapply(list.of.packages, require, character.only = TRUE))
shinyShortcut()
shinyShortcut(shinyDirectory = getwd())
shinyShortcut(shinyDirectory = "C:/Users/dcrook/Documents/scenario_dashboard")
shiny::runApp('scenario_dashboard')
shiny::runApp('scenario_dashboard')
runApp('scenario_dashboard')
# 0.0 Clear Environment ---------------------------------------------------
rm(list = ls())
start_time <- Sys.time()
# 1.0 Load Libraries ------------------------------------------------------
{
easypackages::libraries("openxlsx",
"oxgraphs",
"oemdlRtools",
"stringr",
"stringi",
"Hmisc")
oxgraphs::ox_setup() #ox_setup loads several packages for us (i.e. dplyr, zoo...)
}
# 2.0 Set Parameters & Working Directory ----------------------------------
rds_folder <-
"S:/Economics/Consulting/AEMO_2022/04 Output/2022 rds/"
aemo_outputs <-
"S:/Economics/Consulting/AEMO_2022/04 Output/AEMO Outputs/"
# 3.0 Load RDS data -------------------------------------------------------
rds_filenames <- list.files(rds_folder)
output_data <- data.frame()
for (i in rds_filenames) {
print(i)
a <- readRDS(file.path(rds_folder, i))
output_data <- rbind(output_data, a)
}
View(output_data)
# 0.0 Clear Environment ---------------------------------------------------
rm(list = ls())
start_time <- Sys.time()
# 1.0 Load Libraries ------------------------------------------------------
{
easypackages::libraries("openxlsx",
"oxgraphs",
"oemdlRtools",
"stringr",
"stringi",
"Hmisc")
oxgraphs::ox_setup() #ox_setup loads several packages for us (i.e. dplyr, zoo...)
}
# 2.0 Set Parameters & Working Directory ----------------------------------
rds_folder <-
"S:/Economics/Consulting/AEMO_2022/04 Output/2022 rds/"
aemo_outputs <-
"S:/Economics/Consulting/AEMO_2022/04 Output/AEMO Outputs/"
# 3.0 Load RDS data -------------------------------------------------------
rds_filenames <- list.files(rds_folder)
output_data <- data.frame()
for (i in rds_filenames) {
print(i)
a <- readRDS(file.path(rds_folder, i))
output_data <- rbind(output_data, a)
rm(a)
}
View(output_data)
output_data <- select(output_data, -Series_ID) %>%
mutate(RELEASE_VERSION = 1) %>%
mutate(SCENARIO_VALUE = case_when(
SCENARIO_VALUE == "CENTRAL" ~ "BISOE_CENTRAL",
SCENARIO_VALUE != "CENTRAL" ~ SCENARIO_VALUE
))
View(output_data)
build_var <- c("Houses", "Attached Dwellings")
BUILD <- filter(output_data,
ATTRIBUTE %in% build_var)
ECON <- filter(output_data,
ATTRIBUTE %nin% build_var)
new_pop_vars <- c("Natural Increase", "Net Interstate Migration", "Net Overseas Migration", "Total Population Increase")
ECON <- filter(ECON,
ATTRIBUTE %nin% new_pop_vars)
# 5.0 Save AEMO outputs ---------------------------------------------------
for (i in c("ECON", "BUILD")) {
write_xlsx(get(i), file.path(
aemo_outputs,
paste0("AEMO_", i, "_FY22_Fcst_", Sys.Date(), ".xlsx")
))
write.csv(
get(i),
file.path(
aemo_outputs,
paste0("AEMO_", i, "_FY22_Fcst_", Sys.Date(), ".csv")
),
row.names = FALSE,
fileEncoding = "UTF-8"
)
}
shiny::runApp('scenario_dashboard')
runApp('scenario_dashboard')
shiny::runApp('scenario_dashboard')
runApp('scenario_dashboard')
runApp('scenario_dashboard')
runApp('scenario_dashboard')
