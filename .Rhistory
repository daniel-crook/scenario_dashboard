dplyr::select(-value, -Coefficients) %>%
dplyr::rename(value = Rebased_Value)
View(AID_db_Total_rebased)
Output_Data <- data.frame()
for (j in state_list) {
print(j)
temp_df <-
AID_db_Total_rebased %>% dplyr::filter(Region == j) %>%
dplyr::select(-Series, -Division)  %>%
tidyr::spread(key = Series_ID, value = value) %>%
dplyr::mutate(SFDLCC = CLCC + GCLCC + IFLCC + GILCC) %>%
dplyr::mutate(INDPRODLCC = GVACLCC + GVADLCC + GVAELCC) %>%
dplyr::mutate(
SVCSGVALCC = GVAG1LCC + GVAG2LCC + GVAHLCC + GVAI1LCC +
GVAI2LCC + GVAJLCC + GVAK1LCC + GVAK2LCC + GVAK3LCC +
GVALLCC + GVAMLCC + GVANLCC + GVAOLCC + GVAPLCC
) %>%
dplyr::select(-GCLCC, -CLCC, -GILCC, -IFLCC) %>%
tidyr::gather(key = Series_ID,
value = value,
-YYYYQ,
-(Source:Region))
Output_Data <- Output_Data %>% bind_rows(temp_df)
}
Mapping_Table <-
Output_Data %>% dplyr::mutate(Series_Name = paste0(Series_ID, Region)) %>% select(-YYYYQ, -value) %>% unique()
Date_Df <-
data.frame(YYYYQ = seq(
as.Date("1999/3/1"),
by = "quarter",
length.out = (as.numeric(end_yr) - as.numeric(st_yr)) * 4 + 2
)) %>%
dplyr::left_join(
Output_Data %>% dplyr::mutate(Series_Name = paste0(Series_ID, Region)) %>%
dplyr::select(-Source:-Series_ID) %>%
tidyr::spread(key = Series_Name, value = value),
by = c("YYYYQ")
)
Df <-
sapply(Date_Df %>% select(-YYYYQ), FUN = project_forward_YoY) %>% unlist() %>% as.data.frame()
Mapping_Table <-
Output_Data %>% dplyr::mutate(Series_Name = paste0(Series_ID, Region)) %>% select(-YYYYQ, -value) %>% unique()
Date_Df <-
data.frame(YYYYQ = seq(
as.Date("1999/3/1"),
by = "quarter",
length.out = (as.numeric(end_yr) - as.numeric(st_yr)) * 4 + 2
)) %>%
dplyr::left_join(
Output_Data %>% dplyr::mutate(Series_Name = paste0(Series_ID, Region)) %>%
dplyr::select(-Source:-Series_ID) %>%
tidyr::spread(key = Series_Name, value = value),
by = c("YYYYQ")
)
View(Date_Df)
rm(list = ls())
library(shiny)
library(bslib)
library(htmltools)
library(shinyWidgets)
library(stringi)
library(stringr)
library(oxgraphs)
library(plotly)
library(DT)
library(strex)
library(data.table)
library(kableExtra)
ox_setup()
fp <- dirname(getActiveDocumentContext()$path)
setwd(fp)
# 0.0 Data Processing -----------------------------------------------------
source("data processing/DataProcessing_AEMO.R")
Output_Data_FY <-
Output_Data_FY %>% left_join(meta_data_df, by = c("Series_ID" = "MNEMONIC")) %>%
dplyr::select(-Source, -Extract_Date) %>%
dplyr::filter(FY > st_yr) %>%
dplyr::transmute(
MPE_DATE = FY,
STATE = Region,
RELEASE_VERSION = release_version,
SCENARIO_VALUE = Scenario,
ATTRIBUTE = Attribute,
UNIT = Unit,
VALUE = value,
DESC = Comments,
STATUS = Scenario_status,
Series_ID = Series_ID
) %>%
dplyr::mutate(TEMPORAL = "Annual") %>%
dplyr::arrange(RELEASE_VERSION,
STATE,
ATTRIBUTE,
MPE_DATE,
SCENARIO_VALUE) %>%
as.data.frame()
Output_Data_FY[(Output_Data_FY$STATE == "AUS") &
(Output_Data_FY$ATTRIBUTE == "Gross State Product"), "ATTRIBUTE"] <-
"Gross Domestic Product"
Output_Data <-
Output_Data %>% dplyr::left_join(
list.of.indicators %>%
dplyr::select(Series_ID, Aggregation_Rule) %>%
unique(),
by = "Series_ID"
)
Output_Data_FY_Sum <-
Output_Data %>% dplyr::filter(Aggregation_Rule == "Sum") %>%
dplyr::select(-Year, -Quarter, -Aggregation_Rule) %>%
dplyr::group_by(Source, Extract_Date, Region, Series_ID, Scenario, FY) %>%
dplyr::summarise(value = sum(value, na.rm = T)) %>%
dplyr::ungroup()
Output_Data_FY_Max <-
Output_Data %>% dplyr::filter(Aggregation_Rule == "Max") %>%
dplyr::filter(Quarter == "Q2") %>%
dplyr::select(-Year, -Quarter, -Aggregation_Rule, -YYYYQ) %>%
dplyr::transmute(Source,
Extract_Date,
Region,
Series_ID,
value = value / 1000,
FY,
Scenario)
Output_Data_FY <- Output_Data_FY_Sum %>%
dplyr::bind_rows(Output_Data_FY_Max)
Mapping_Table <-
Output_Data %>% dplyr::mutate(Series_Name = paste0(Series_ID, Region)) %>% select(-YYYYQ, -value) %>% unique()
Date_Df <-
data.frame(YYYYQ = seq(
as.Date("1999/3/1"),
by = "quarter",
length.out = (as.numeric(end_yr) - as.numeric(st_yr)) * 4 + 2
)) %>%
dplyr::left_join(
Output_Data %>% dplyr::mutate(Series_Name = paste0(Series_ID, Region)) %>%
dplyr::select(-Source:-Series_ID) %>%
tidyr::spread(key = Series_Name, value = value),
by = c("YYYYQ")
)
Df <-
sapply(Date_Df %>% select(-YYYYQ), FUN = project_forward_YoY) %>% unlist() %>% as.data.frame()
Df$YYYYQ <- Date_Df$YYYYQ
Df <-
Df %>% select(length(Df), 1:{
length(Df) - 1
}) %>% tidyr::gather(key = Series_Name, value = value, -YYYYQ) %>%
dplyr::left_join(Mapping_Table, by = "Series_Name") %>% select(-Series_Name)
Output_Data <- Df
Output_Data$Yr_Qtr <- Output_Data$YYYYQ %>%
zoo::as.yearqtr() %>% #requires data to be in yearqtr class
zoo::yearqtr() #converts date to yearqtr format
# Adding in Column that identifies History vs. Forecast
Output_Data <- Output_Data %>%
tidyr::separate(Yr_Qtr,
c("Year", "Quarter"),
sep = " ",
remove = F) %>%
dplyr::transmute(
YYYYQ,
Source,
Extract_Date,
Scenario,
Region,
Series_ID,
value,
Year = as.numeric(Year),
Quarter
) %>%
dplyr::mutate(FY = ifelse(Quarter %in% c("Q1", "Q2"), Year, Year + 1)) %>% #Creates Financial Year Column
dplyr::select(-Scenario) %>%
dplyr::mutate(Scenario = Scenario_name) #For Financial Years less than or equal to
#last year of hist (specified in section #3.0), mark as History or else mark as Forecast
Mapping_Table <-
Output_Data %>% dplyr::mutate(Series_Name = paste0(Series_ID, Region)) %>% select(-YYYYQ, -value) %>% unique()
Date_Df <-
data.frame(YYYYQ = seq(
as.Date("1999/3/1"),
by = "quarter",
length.out = (as.numeric(end_yr) - as.numeric(st_yr)) * 4 + 2
)) %>%
dplyr::left_join(
Output_Data %>% dplyr::mutate(Series_Name = paste0(Series_ID, Region)) %>%
dplyr::select(-Source:-Series_ID) %>%
tidyr::spread(key = Series_Name, value = value),
by = c("YYYYQ")
)
Df <-
sapply(Date_Df %>% select(-YYYYQ), FUN = project_forward_YoY) %>% unlist() %>% as.data.frame()
Df$YYYYQ <- Date_Df$YYYYQ
Df <-
Df %>% select(length(Df), 1:{
length(Df) - 1
}) %>% tidyr::gather(key = Series_Name, value = value, -YYYYQ) %>%
dplyr::left_join(Mapping_Table, by = "Series_Name") %>% select(-Series_Name)
Output_Data <- Df
Output_Data$Yr_Qtr <- Output_Data$YYYYQ %>%
zoo::as.yearqtr() %>% #requires data to be in yearqtr class
zoo::yearqtr() #converts date to yearqtr format
# Adding in Column that identifies History vs. Forecast
Output_Data <- Output_Data %>%
tidyr::separate(Yr_Qtr,
c("Year", "Quarter"),
sep = " ",
remove = F) %>%
dplyr::transmute(
YYYYQ,
Source,
Extract_Date,
Scenario,
Region,
Series_ID,
value,
Year = as.numeric(Year),
Quarter
) %>%
dplyr::mutate(FY = ifelse(Quarter %in% c("Q1", "Q2"), Year, Year + 1)) %>% #Creates Financial Year Column
dplyr::select(-Scenario) %>%
dplyr::mutate(Scenario = Scenario_name) #For Financial Years less than or equal to
#last year of hist (specified in section #3.0), mark as History or else mark as Forecast
Mapping_Table <-
Output_Data %>% dplyr::mutate(Series_Name = paste0(Series_ID, Region)) %>% select(-YYYYQ, -value) %>% unique()
Date_Df <-
data.frame(YYYYQ = seq(
as.Date("1999/3/1"),
by = "quarter",
length.out = (as.numeric(end_yr) - as.numeric(st_yr)) * 4 + 2
)) %>%
dplyr::left_join(
Output_Data %>% dplyr::mutate(Series_Name = paste0(Series_ID, Region)) %>%
dplyr::select(-Source:-Series_ID) %>%
tidyr::spread(key = Series_Name, value = value),
by = c("YYYYQ")
)
Mapping_Table <-
Output_Data %>% dplyr::mutate(Series_Name = paste0(Series_ID, Region)) %>% select(-YYYYQ, -value) %>% unique()
Date_Df <-
data.frame(YYYYQ = seq(
as.Date("1999/3/1"),
by = "quarter",
length.out = (as.numeric(end_yr) - as.numeric(st_yr)) * 4 + 2
)) %>%
dplyr::left_join(
Output_Data %>% dplyr::mutate(Series_Name = paste0(Series_ID, Region)) %>%
dplyr::select(-Source:-Series_ID) %>%
tidyr::spread(key = Series_Name, value = value),
by = c("YYYYQ")
)
Df <-
sapply(Date_Df %>% select(-YYYYQ), FUN = project_forward_YoY) %>% unlist() %>% as.data.frame()
rm(list = ls())
library(shiny)
library(bslib)
library(htmltools)
library(shinyWidgets)
library(stringi)
library(stringr)
library(oxgraphs)
library(plotly)
library(DT)
library(strex)
library(data.table)
library(kableExtra)
ox_setup()
fp <- dirname(getActiveDocumentContext()$path)
setwd(fp)
# 0.0 Data Processing -----------------------------------------------------
source("data processing/DataProcessing_AEMO.R")
Mapping_Table <-
Output_Data %>% dplyr::mutate(Series_Name = paste0(Series_ID, Region)) %>% select(-YYYYQ, -value) %>% unique()
Date_Df <-
data.frame(YYYYQ = seq(
as.Date("1999/3/1"),
by = "quarter",
length.out = (as.numeric(end_yr) - as.numeric(st_yr)) * 4 + 2
)) %>%
dplyr::left_join(
Output_Data %>% dplyr::mutate(Series_Name = paste0(Series_ID, Region)) %>%
dplyr::select(-Source:-Series_ID) %>%
tidyr::spread(key = Series_Name, value = value),
by = c("YYYYQ")
)
Df <-
sapply(Date_Df %>% select(-YYYYQ), FUN = project_forward_YoY) %>% unlist() %>% as.data.frame()
Df$YYYYQ <- Date_Df$YYYYQ
Df <-
Df %>% select(length(Df), 1:{
length(Df) - 1
}) %>% tidyr::gather(key = Series_Name, value = value, -YYYYQ) %>%
dplyr::left_join(Mapping_Table, by = "Series_Name") %>% select(-Series_Name)
Output_Data <- Df
Output_Data$Yr_Qtr <- Output_Data$YYYYQ %>%
zoo::as.yearqtr() %>% #requires data to be in yearqtr class
zoo::yearqtr() #converts date to yearqtr format
# Adding in Column that identifies History vs. Forecast
Output_Data <- Output_Data %>%
tidyr::separate(Yr_Qtr,
c("Year", "Quarter"),
sep = " ",
remove = F) %>%
dplyr::transmute(
YYYYQ,
Source,
Extract_Date,
Scenario,
Region,
Series_ID,
value,
Year = as.numeric(Year),
Quarter
) %>%
dplyr::mutate(FY = ifelse(Quarter %in% c("Q1", "Q2"), Year, Year + 1)) %>% #Creates Financial Year Column
dplyr::select(-Scenario) %>%
dplyr::mutate(Scenario = Scenario_name) #For Financial Years less than or equal to
#last year of hist (specified in section #3.0), mark as History or else mark as Forecast
Mapping_Table <-
Output_Data %>% dplyr::mutate(Series_Name = paste0(Series_ID, Region)) %>% select(-YYYYQ, -value) %>% unique()
Date_Df <-
data.frame(YYYYQ = seq(
as.Date("1999/3/1"),
by = "quarter",
length.out = (as.numeric(end_yr) - as.numeric(st_yr)) * 4 + 2
)) %>%
dplyr::left_join(
Output_Data %>% dplyr::mutate(Series_Name = paste0(Series_ID, Region)) %>%
dplyr::select(-Source:-Series_ID) %>%
tidyr::spread(key = Series_Name, value = value),
by = c("YYYYQ")
)
Df <-
sapply(Date_Df %>% select(-YYYYQ), FUN = project_forward_YoY)
Mapping_Table <-
Output_Data %>% dplyr::mutate(Series_Name = paste0(Series_ID, Region)) %>% select(-YYYYQ, -value) %>% unique()
Date_Df <-
data.frame(YYYYQ = seq(
as.Date("1999/3/1"),
by = "quarter",
length.out = (as.numeric(end_yr) - as.numeric(st_yr)) * 4 + 2
)) %>%
dplyr::left_join(
Output_Data %>% dplyr::mutate(Series_Name = paste0(Series_ID, Region)) %>%
dplyr::select(-Source:-Series_ID) %>%
tidyr::spread(key = Series_Name, value = value),
by = c("YYYYQ")
)
View(Date_Df)
Mapping_Table <-
Output_Data %>% dplyr::mutate(Series_Name = paste0(Series_ID, Region)) %>% select(-YYYYQ, -value) %>% unique()
Date_Df <-
data.frame(YYYYQ = seq(
as.Date("1999/3/1"),
by = "quarter",
length.out = (as.numeric(end_yr) - as.numeric(st_yr)) * 4 + 2
)) %>%
dplyr::left_join(
Output_Data %>% dplyr::mutate(Series_Name = paste0(Series_ID, Region)) %>%
dplyr::select(-Source:-Series_ID) %>%
tidyr::spread(key = Series_Name, value = value),
by = c("YYYYQ")
)
Df$YYYYQ <- Date_Df$YYYYQ
View(Mapping_Table)
rm(list = ls())
library(shiny)
library(bslib)
library(htmltools)
library(shinyWidgets)
library(stringi)
library(stringr)
library(oxgraphs)
library(plotly)
library(DT)
library(strex)
library(data.table)
library(kableExtra)
ox_setup()
fp <- dirname(getActiveDocumentContext()$path)
setwd(fp)
# 0.0 Data Processing -----------------------------------------------------
source("data processing/DataProcessing_AEMO.R")
Mapping_Table <-
Output_Data %>% dplyr::mutate(Series_Name = paste0(Series_ID, Region)) %>% select(-YYYYQ, -value) %>% unique()
Date_Df <-
data.frame(YYYYQ = seq(
as.Date("1999/3/1"),
by = "quarter",
length.out = (as.numeric(end_yr) - as.numeric(st_yr)) * 4 + 2
)) %>%
dplyr::left_join(
Output_Data %>% dplyr::mutate(Series_Name = paste0(Series_ID, Region)) %>%
dplyr::select(-Source:-Series_ID) %>%
tidyr::spread(key = Series_Name, value = value),
by = c("YYYYQ")
)
View(Date_Df)
View(Output_Data)
View(Date_Df)
Mapping_Table <-
Output_Data %>% dplyr::mutate(Series_Name = paste0(Series_ID, Region)) %>% select(-YYYYQ, -value) %>% unique()
Date_Df <-
data.frame(YYYYQ = seq(
as.Date("1999/3/1"),
by = "quarter",
length.out = (as.numeric(end_yr) - as.numeric(st_yr)) * 4 + 2
)) %>%
dplyr::left_join(
Output_Data %>% dplyr::mutate(Series_Name = paste0(Series_ID, Region)) %>%
dplyr::select(-Source:-Series_ID) %>%
tidyr::spread(key = Series_Name, value = value),
by = c("YYYYQ")
)
Date_Df2 <- melt(YYYYQ)
Mapping_Table <-
Output_Data %>% dplyr::mutate(Series_Name = paste0(Series_ID, Region)) %>% select(-YYYYQ, -value) %>% unique()
Date_Df <-
data.frame(YYYYQ = seq(
as.Date("1999/3/1"),
by = "quarter",
length.out = (as.numeric(end_yr) - as.numeric(st_yr)) * 4 + 2
)) %>%
dplyr::left_join(
Output_Data %>% dplyr::mutate(Series_Name = paste0(Series_ID, Region)) %>%
dplyr::select(-Source:-Series_ID) %>%
tidyr::spread(key = Series_Name, value = value),
by = c("YYYYQ")
)
Date_Df2 <- melt("YYYYQ")
View(Date_Df2)
Mapping_Table <-
Output_Data %>% dplyr::mutate(Series_Name = paste0(Series_ID, Region)) %>% select(-YYYYQ, -value) %>% unique()
Date_Df <-
data.frame(YYYYQ = seq(
as.Date("1999/3/1"),
by = "quarter",
length.out = (as.numeric(end_yr) - as.numeric(st_yr)) * 4 + 2
)) %>%
dplyr::left_join(
Output_Data %>% dplyr::mutate(Series_Name = paste0(Series_ID, Region)) %>%
dplyr::select(-Source:-Series_ID) %>%
tidyr::spread(key = Series_Name, value = value),
by = c("YYYYQ")
)
Date_Df2 <- melt(Date_Df)
View(Date_Df2)
Mapping_Table <-
Output_Data %>% dplyr::mutate(Series_Name = paste0(Series_ID, Region)) %>% select(-YYYYQ, -value) %>% unique()
Date_Df <-
data.frame(YYYYQ = seq(
as.Date("1999/3/1"),
by = "quarter",
length.out = (as.numeric(end_yr) - as.numeric(st_yr)) * 4 + 2
)) %>%
dplyr::left_join(
Output_Data %>% dplyr::mutate(Series_Name = paste0(Series_ID, Region)) %>%
dplyr::select(-Source:-Series_ID) %>%
tidyr::spread(key = Series_Name, value = value),
by = c("YYYYQ")
)
Date_Df[Date_Df == 0] <- 0.001
Df <-
sapply(Date_Df %>% select(-YYYYQ), FUN = project_forward_YoY) %>% unlist() %>% as.data.frame()
View(Date_Df)
View(Df)
rm(list = ls())
library(shiny)
library(bslib)
library(htmltools)
library(shinyWidgets)
library(stringi)
library(stringr)
library(oxgraphs)
library(plotly)
library(DT)
library(strex)
library(data.table)
library(kableExtra)
ox_setup()
fp <- dirname(getActiveDocumentContext()$path)
setwd(fp)
# 0.0 Data Processing -----------------------------------------------------
source("data processing/DataProcessing_AEMO.R")
#complile & organise dashboard data
{
RDS_folder <- "data processing/RDS Files/"
rds_files <- list.files(path = RDS_folder)
data <- NULL
for (i in rds_files){
print(i)
d2 <- readRDS(paste0(RDS_folder,i))
data <- rbind(data,d2)
rm(d2)
}
data <- data %>%
mutate(SCENARIO_VALUE = str_to_title(gsub("_", " ", SCENARIO_VALUE))) %>%
mutate(RELEASE_VERSION = gsub("_", " ", RELEASE_VERSION))
data <- mutate(data, ATTRIBUTE = case_when(
substr(ATTRIBUTE, 1, 11) == "Gross Value" ~ paste0("GVA - ",
substr(
ATTRIBUTE,
stri_locate_last_fixed(ATTRIBUTE, ">>") + 3,
nchar(ATTRIBUTE)
)),
substr(ATTRIBUTE, 1, 11) != "Gross Value" ~ ATTRIBUTE
))
saveRDS(data, "data/Dashboard_Data.rds")
}
data <- readRDS("data/Dashboard_Data.rds") %>%
mutate(Dates = year(MPE_DATE)) %>%
mutate(value = VALUE) %>%
add.var.col(.) %>%
add.sc.col(.) %>%
add.ic.col(.)
runApp()
