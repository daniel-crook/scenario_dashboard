value = as.numeric(value),
Mnemonic,
Scenario = paste(Scenario)
) %>%
mutate(value = case_when(Mnemonic == "DELEC" ~ value / 11630,
Mnemonic != "DELEC" ~ value))
chart_data_delec <- filter(chart_data, Mnemonic == "DELEC") %>% trail_sum()
chart_data <- filter(chart_data, Mnemonic != "DELEC") %>% trail_avg() %>% rbind(., chart_data_delec)
chart_data <- mutate(chart_data, value = round(value, 2)) %>%
filter(., month(Dates) == 12) %>%
mutate(., Dates = year(Dates)) %>%
select(-Mnemonic) %>%
spread(., variable, value)
chart_data <- filter(chart_data, Dates == "2050")
input <- colnames(chart_data)[3:length(colnames(chart_data))]
fig <- plot_ly(chart_data, y = ~Scenario,  x = ~chart_data[[input[1]]],
type = 'bar',
orientation = 'h',
name = input[1],
color = I(ox_pallette()[1])
) %>%
layout(
xaxis = list(title = "Mtoe"),
yaxis = list(title = ""),
legend = list(
orientation = "h",
xanchor = "center",
x = 0.5,
y = -0.2
),
barmode = 'stack'
) %>%
layout(title = list(
text = paste0(
'<b>',
"Overall Energy Mix for Australia, 2050, by Scenario",
'<b>'
),
x = 0.08,
y = 0.99,
font = list(
family = "segoe ui",
size = 18,
color = ox_pallette()[2]
)
))
if (length(input) >= 2) {
for (i in 2:length(input)) {
fig <- fig %>% add_trace(x = chart_data[[input[i]]],
color = I(ox_pallette()[i]),
name = input[i])
}
}
fig
year <- "2050"
new_name <- data.frame(Attribute = c("Demand For Gas (Excl. Electricity)",
"Demand For Oil (Excl. Electricity)",
"Demand For Coal (Excl. Electricity)",
"Total Final Electricity Consumption"
), new_name = c("Gas", "Oil", "Coal", "Electricity"))
chart_data <-
filter(data,
Mnemonic %in% c("DGAS_XELEC", "DOIL_XELEC", "DCOAL_XELEC", "DELEC")) %>%
left_join(., new_name, by = "Attribute") %>%
transmute(.,
Dates = as.Date(Dates),
variable = new_name,
value = as.numeric(value),
Mnemonic,
Scenario = paste(Scenario)
) %>%
mutate(value = case_when(Mnemonic == "DELEC" ~ value / 11630,
Mnemonic != "DELEC" ~ value))
chart_data_delec <- filter(chart_data, Mnemonic == "DELEC") %>% trail_sum()
chart_data <- filter(chart_data, Mnemonic != "DELEC") %>% trail_avg() %>% rbind(., chart_data_delec)
chart_data <- mutate(chart_data, value = round(value, 2)) %>%
filter(., month(Dates) == 12) %>%
mutate(., Dates = year(Dates)) %>%
select(-Mnemonic) %>%
spread(., variable, value)
chart_data <- filter(chart_data, Dates == year)
input <- colnames(chart_data)[3:length(colnames(chart_data))]
fig <- plot_ly(chart_data, y = ~Scenario,  x = ~chart_data[[input[1]]],
type = 'bar',
orientation = 'h',
name = input[1],
color = I(ox_pallette()[1])
) %>%
layout(
xaxis = list(title = "Mtoe"),
yaxis = list(title = ""),
legend = list(
orientation = "h",
xanchor = "center",
x = 0.5,
y = -0.2
),
barmode = 'stack'
) %>%
layout(title = list(
text = paste0(
'<b>',
"Overall Energy Mix for Australia, ",year,", by Scenario",
'<b>'
),
x = 0.08,
y = 0.99,
font = list(
family = "segoe ui",
size = 18,
color = ox_pallette()[2]
)
))
if (length(input) >= 2) {
for (i in 2:length(input)) {
fig <- fig %>% add_trace(x = chart_data[[input[i]]],
color = I(ox_pallette()[i]),
name = input[i])
}
}
fig
year <- "2035"
new_name <- data.frame(Attribute = c("Demand For Gas (Excl. Electricity)",
"Demand For Oil (Excl. Electricity)",
"Demand For Coal (Excl. Electricity)",
"Total Final Electricity Consumption"
), new_name = c("Gas", "Oil", "Coal", "Electricity"))
chart_data <-
filter(data,
Mnemonic %in% c("DGAS_XELEC", "DOIL_XELEC", "DCOAL_XELEC", "DELEC")) %>%
left_join(., new_name, by = "Attribute") %>%
transmute(.,
Dates = as.Date(Dates),
variable = new_name,
value = as.numeric(value),
Mnemonic,
Scenario = paste(Scenario)
) %>%
mutate(value = case_when(Mnemonic == "DELEC" ~ value / 11630,
Mnemonic != "DELEC" ~ value))
chart_data_delec <- filter(chart_data, Mnemonic == "DELEC") %>% trail_sum()
chart_data <- filter(chart_data, Mnemonic != "DELEC") %>% trail_avg() %>% rbind(., chart_data_delec)
chart_data <- mutate(chart_data, value = round(value, 2)) %>%
filter(., month(Dates) == 12) %>%
mutate(., Dates = year(Dates)) %>%
select(-Mnemonic) %>%
spread(., variable, value)
chart_data <- filter(chart_data, Dates == year)
input <- colnames(chart_data)[3:length(colnames(chart_data))]
fig <- plot_ly(chart_data, y = ~Scenario,  x = ~chart_data[[input[1]]],
type = 'bar',
orientation = 'h',
name = input[1],
color = I(ox_pallette()[1])
) %>%
layout(
xaxis = list(title = "Mtoe"),
yaxis = list(title = ""),
legend = list(
orientation = "h",
xanchor = "center",
x = 0.5,
y = -0.2
),
barmode = 'stack'
) %>%
layout(title = list(
text = paste0(
'<b>',
"Overall Energy Mix for Australia, ",year,", by Scenario",
'<b>'
),
x = 0.08,
y = 0.99,
font = list(
family = "segoe ui",
size = 18,
color = ox_pallette()[2]
)
))
if (length(input) >= 2) {
for (i in 2:length(input)) {
fig <- fig %>% add_trace(x = chart_data[[input[i]]],
color = I(ox_pallette()[i]),
name = input[i])
}
}
fig
shiny::runApp('scenario_dashboard')
runApp('scenario_dashboard')
runApp('scenario_dashboard')
rm(list = ls())
list.of.packages <-
c(
"shiny",
"bslib",
"htmltools",
"shinyWidgets",
"stringi",
"stringr",
"oxgraphs",
"plotly",
"DT",
"strex",
"data.table",
"kableExtra",
"shinyFiles",
"shinyjs",
"git2r",
"waiter",
"shinyFeedback"
)
new.packages <- list.of.packages[!(list.of.packages %in%
installed.packages()[, "Package"])]
if (length(new.packages)) {
install.packages(new.packages)
}
invisible(lapply(list.of.packages, require, character.only = TRUE))
ox_setup()
fp <- dirname(getActiveDocumentContext()$path)
setwd(fp)
# 0.0 Data Processing -----------------------------------------------------
#source("data processing/DataProcessing_AEMO.R")
# 0.1 Import Functions ----------------------------------------------------
source("functions/functions.R")
# 0.2 Import Processed AID Data -------------------------------------------
source("data/import_data.R")
# 0.3 Import GEM Data -----------------------------------------------------
source("data/import_data_gem.R")
# 1.0 Static Elements -----------------------------------------------------
my_theme <- bs_theme(
bootswatch = "lumen",
primary = ox_pallette()[2],
info = ox_pallette()[2],
font_scale = 1.0
)
# 2.0 Import Modules ------------------------------------------------------
lapply(list.files(
path = "modules/",
full.names = TRUE,
pattern = "*.R"
),
source)
# 3.0 UI ------------------------------------------------------------------
ui <-  tagList(
tags$head(tags$script(type = "text/javascript", src = "code.js")),
useWaiter(),
waiterPreloader(html = spin_folding_cube()),
navbarPage(
title = div(img(
src = 'AEMO logo.png',
style = "margin-top: 0px",
height = 75
)),
id = "navbar",
windowTitle = "Scenario Dashboard",
position = "static-top",
theme = my_theme,
tabPanel(h5(icon("fas fa-home"), strong("Home")),
homepage_ui("homepage")),
tabPanel(
h5(icon("fas fa-chart-line"), strong("Variable Comparison")),
tabsetPanel(
type = "pills",
vc_version_ui("vc_version"),
vc_scenario_ui("vc_scenario"),
vc_region_ui("vc_region")
)
),
tabPanel(
h5(icon("fas fa-map-marked-alt"), strong("State Composition")),
tabsetPanel(
type = "pills",
sc_version_ui("sc_version"),
sc_scenario_ui("sc_scenario"),
sc_region_ui("sc_region")
)
),
tabPanel(
h5(icon("fas fa-industry"), strong("Industry Comparison")),
tabsetPanel(
type = "pills",
ic_version_ui("ic_version"),
ic_scenario_ui("ic_scenario"),
ic_region_ui("ic_region"),
ic_industry_ui("ic_industry")
)
),
tabPanel(
h5(icon("fas fa-user"), strong("Demographics")),
tabsetPanel(
type = "pills",
d_region_breakdown_ui("d_region_breakdown"),
d_total_increase_by_region_ui("d_total_increase_by_region")
)
),
tabPanel(
h5(icon("fas fa-globe-asia"), strong("GEM Checks")),
tabsetPanel(
type = "pills",
gc_version_ui("gc_version"),
# gc_scenario_ui("gc_scenario"),
tabPanel("AC - % of GDP")
)
)
)
)
# 4.0 Server --------------------------------------------------------------
server <- function(input, output, session) {
homepage_server("homepage")
vc_version_server("vc_version", data)
vc_scenario_server("vc_scenario", data)
vc_region_server("vc_region", data)
sc_version_server("sc_version", data)
sc_scenario_server("sc_scenario", data)
sc_region_server("sc_region", data)
ic_version_server("ic_version", data)
ic_scenario_server("ic_scenario", data)
ic_region_server("ic_region", data)
ic_industry_server("ic_industry", data)
d_region_breakdown_server("d_region_breakdown", data)
d_total_increase_by_region_server("d_total_increase_by_region", data)
gc_version_server("gc_version", gem_data)
# gc_scenario_server("gc_scenario", gem_data)
}
# 5.0 Run App -------------------------------------------------------------
shinyApp(
ui = ui,
server = server,
options = list(launch.browser = TRUE)
)
rm(list = ls())
list.of.packages <-
c(
"shiny",
"bslib",
"htmltools",
"shinyWidgets",
"stringi",
"stringr",
"oxgraphs",
"plotly",
"DT",
"strex",
"data.table",
"kableExtra",
"shinyFiles",
"shinyjs",
"git2r",
"waiter",
"shinyFeedback"
)
new.packages <- list.of.packages[!(list.of.packages %in%
installed.packages()[, "Package"])]
if (length(new.packages)) {
install.packages(new.packages)
}
invisible(lapply(list.of.packages, require, character.only = TRUE))
ox_setup()
fp <- dirname(getActiveDocumentContext()$path)
setwd(fp)
# 0.0 Data Processing -----------------------------------------------------
#source("data processing/DataProcessing_AEMO.R")
# 0.1 Import Functions ----------------------------------------------------
source("functions/functions.R")
# 0.2 Import Processed AID Data -------------------------------------------
source("data/import_data.R")
# 0.3 Import GEM Data -----------------------------------------------------
source("data/import_data_gem.R")
# 1.0 Static Elements -----------------------------------------------------
my_theme <- bs_theme(
bootswatch = "lumen",
primary = ox_pallette()[2],
info = ox_pallette()[2],
font_scale = 1.0
)
# 2.0 Import Modules ------------------------------------------------------
lapply(list.files(
path = "modules/",
full.names = TRUE,
pattern = "*.R"
),
source)
# 3.0 UI ------------------------------------------------------------------
ui <-  tagList(
tags$head(tags$script(type = "text/javascript", src = "code.js")),
useWaiter(),
waiterPreloader(html = spin_folding_cube()),
navbarPage(
title = div(img(
src = 'AEMO logo.png',
style = "margin-top: 0px",
height = 75
)),
id = "navbar",
windowTitle = "Scenario Dashboard",
position = "static-top",
theme = my_theme,
tabPanel(h5(icon("fas fa-home"), strong("Home")),
homepage_ui("homepage")),
tabPanel(
h5(icon("fas fa-chart-line"), strong("Variable Comparison")),
tabsetPanel(
type = "pills",
vc_version_ui("vc_version"),
vc_scenario_ui("vc_scenario"),
vc_region_ui("vc_region")
)
),
tabPanel(
h5(icon("fas fa-map-marked-alt"), strong("State Composition")),
tabsetPanel(
type = "pills",
sc_version_ui("sc_version"),
sc_scenario_ui("sc_scenario"),
sc_region_ui("sc_region")
)
),
tabPanel(
h5(icon("fas fa-industry"), strong("Industry Comparison")),
tabsetPanel(
type = "pills",
ic_version_ui("ic_version"),
ic_scenario_ui("ic_scenario"),
ic_region_ui("ic_region"),
ic_industry_ui("ic_industry")
)
),
tabPanel(
h5(icon("fas fa-user"), strong("Demographics")),
tabsetPanel(
type = "pills",
d_region_breakdown_ui("d_region_breakdown"),
d_total_increase_by_region_ui("d_total_increase_by_region")
)
),
tabPanel(
h5(icon("fas fa-globe-asia"), strong("GEM Checks")),
tabsetPanel(
type = "pills",
gc_version_ui("gc_version"),
# gc_scenario_ui("gc_scenario"),
tabPanel("AC - % of GDP")
)
)
)
)
# 4.0 Server --------------------------------------------------------------
server <- function(input, output, session) {
homepage_server("homepage")
vc_version_server("vc_version", data)
vc_scenario_server("vc_scenario", data)
vc_region_server("vc_region", data)
sc_version_server("sc_version", data)
sc_scenario_server("sc_scenario", data)
sc_region_server("sc_region", data)
ic_version_server("ic_version", data)
ic_scenario_server("ic_scenario", data)
ic_region_server("ic_region", data)
ic_industry_server("ic_industry", data)
d_region_breakdown_server("d_region_breakdown", data)
d_total_increase_by_region_server("d_total_increase_by_region", data)
gc_version_server("gc_version", gem_data)
# gc_scenario_server("gc_scenario", gem_data)
}
# 5.0 Run App -------------------------------------------------------------
shinyApp(
ui = ui,
server = server,
options = list(launch.browser = TRUE)
)
runApp()
detach("package:git2r", unload = TRUE)
runApp()
observe({
volumes <- getVolumes()()
shinyDirChoose(
input,
"aid_directory",
roots = volumes,
session = session,
restrictions = system.file(package = "base"),
allowDirCreate = FALSE
)
shinyFileChoose(
input,
"aid_file",
roots = volumes,
session = session,
restrictions = system.file(package = "base")
)
output$aid_directorypath <- renderPrint({
if (is.integer(input$aid_directory) & is.integer(input$aid_file)) {
cat("Please select a folder/file")
} else if (!(is.integer(input$aid_directory))) {
file.path(parseDirPath(volumes, input$aid_directory), "/")
} else if (!(is.integer(input$aid_file))) {
file.path(parseFilePaths(volumes, input$aid_file))[4]
}
})
})
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
